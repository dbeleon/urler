// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: urler.proto

package urler

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddUserRequestMultiError,
// or nil if none found.
func (m *AddUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) > 256 {
		err := AddUserRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddUserRequest_Name_Pattern.MatchString(m.GetName()) {
		err := AddUserRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_\\\\.]+[A-Za-z0-9-_\\\\. ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AddUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddUserRequestMultiError(errors)
	}

	return nil
}

func (m *AddUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddUserRequestMultiError is an error wrapping multiple validation errors
// returned by AddUserRequest.ValidateAll() if the designated constraints
// aren't met.
type AddUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserRequestMultiError) AllErrors() []error { return m }

// AddUserRequestValidationError is the validation error returned by
// AddUserRequest.Validate if the designated constraints aren't met.
type AddUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRequestValidationError) ErrorName() string { return "AddUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRequestValidationError{}

var _AddUserRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9-_\\.]+[A-Za-z0-9-_\\. ]*$")

// Validate checks the field values on AddUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserResponseMultiError, or nil if none found.
func (m *AddUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	if len(errors) > 0 {
		return AddUserResponseMultiError(errors)
	}

	return nil
}

// AddUserResponseMultiError is an error wrapping multiple validation errors
// returned by AddUserResponse.ValidateAll() if the designated constraints
// aren't met.
type AddUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserResponseMultiError) AllErrors() []error { return m }

// AddUserResponseValidationError is the validation error returned by
// AddUserResponse.Validate if the designated constraints aren't met.
type AddUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserResponseValidationError) ErrorName() string { return "AddUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserResponseValidationError{}

// Validate checks the field values on MakeUrlRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MakeUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakeUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MakeUrlRequestMultiError,
// or nil if none found.
func (m *MakeUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MakeUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Url

	if len(errors) > 0 {
		return MakeUrlRequestMultiError(errors)
	}

	return nil
}

// MakeUrlRequestMultiError is an error wrapping multiple validation errors
// returned by MakeUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type MakeUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakeUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakeUrlRequestMultiError) AllErrors() []error { return m }

// MakeUrlRequestValidationError is the validation error returned by
// MakeUrlRequest.Validate if the designated constraints aren't met.
type MakeUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakeUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakeUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakeUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakeUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakeUrlRequestValidationError) ErrorName() string { return "MakeUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e MakeUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakeUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakeUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakeUrlRequestValidationError{}

// Validate checks the field values on MakeUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MakeUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakeUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MakeUrlResponseMultiError, or nil if none found.
func (m *MakeUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MakeUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return MakeUrlResponseMultiError(errors)
	}

	return nil
}

// MakeUrlResponseMultiError is an error wrapping multiple validation errors
// returned by MakeUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type MakeUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakeUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakeUrlResponseMultiError) AllErrors() []error { return m }

// MakeUrlResponseValidationError is the validation error returned by
// MakeUrlResponse.Validate if the designated constraints aren't met.
type MakeUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakeUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakeUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakeUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakeUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakeUrlResponseValidationError) ErrorName() string { return "MakeUrlResponseValidationError" }

// Error satisfies the builtin error interface
func (e MakeUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakeUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakeUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakeUrlResponseValidationError{}

// Validate checks the field values on GetUrlRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUrlRequestMultiError, or
// nil if none found.
func (m *GetUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetUrlRequestMultiError(errors)
	}

	return nil
}

// GetUrlRequestMultiError is an error wrapping multiple validation errors
// returned by GetUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlRequestMultiError) AllErrors() []error { return m }

// GetUrlRequestValidationError is the validation error returned by
// GetUrlRequest.Validate if the designated constraints aren't met.
type GetUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlRequestValidationError) ErrorName() string { return "GetUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlRequestValidationError{}

// Validate checks the field values on GetUrlResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUrlResponseMultiError,
// or nil if none found.
func (m *GetUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetUrlResponseMultiError(errors)
	}

	return nil
}

// GetUrlResponseMultiError is an error wrapping multiple validation errors
// returned by GetUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlResponseMultiError) AllErrors() []error { return m }

// GetUrlResponseValidationError is the validation error returned by
// GetUrlResponse.Validate if the designated constraints aren't met.
type GetUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlResponseValidationError) ErrorName() string { return "GetUrlResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlResponseValidationError{}
